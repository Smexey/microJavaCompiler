package compiler;

import java_cup.runtime.*;
import org.apache.log4j.*;
import ast.*;



parser code {:
	boolean errorDetected = false;
	Logger log = Logger.getLogger(getClass());

    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }

    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }

    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message);
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
        System.err.println(msg.toString());
    }

    public void report_info(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message);
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.info(msg.toString());
    }

:}
// preko yylex  
scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null)
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

terminal PROGRAM, RETURN, VOID, LBRACKET, RBRACKET, CLASS, EXTENDS;

terminal SEMICOLN, EQUAL, COMMA, DOT, LPAREN, RPAREN, LBRACE, RBRACE, CONST, NEW;
terminal PRINT,READ;

terminal ADD, SUB, MUL, DIV, MOD, INC, DECR;
terminal EQUALS, NEQUALS, GRT, GRTEQUAL, LESS, LESSEQUAL, AND, OR;

terminal IF, ELSE, SWITCH, CASE;
terminal DO, WHILE, BREAK, CONTINUE;

terminal DDOTS, QMARK;


//basetypes
//popraviti boolean?
terminal String IDENT;
terminal Integer NUM;
terminal Boolean BOOLEAN;
terminal Character CHAR;


non terminal Program, ConstVarClassDeclRepeat, ConstVarClassDecl;


non terminal ConstDecl, ConstDeclRepeat;
non terminal VarDecl, VarDeclIdentRepeat, ArrayBracketsDeclOptional, VarDeclRepeat;
non terminal ClassDecl, ClassExtendsOptional, ClassMethodDecl;
non terminal MethodDeclRepeat, MethodType, FormParsOptional, FormPars, FormParDecl, FormParRepeat;


non terminal StatementRepeat, Statement;
non terminal DesignatorStatement, SubDesignatorRepeat, ArrayBracketsOptional;

non terminal Assignop, Mulop, Addop;
non terminal MinusOptional;
non terminal ActPars, ActParsOptional;

non terminal Relop, RelopExprOptional;

non terminal ElseStatementOptional, ElseStart, PrintWidthOptional, CaseRepeat;

non terminal SuperClass;

non terminal StartSwitch, StartDo, StartIf, FunctDesignator;
non terminal ClassName;

non terminal OrStart, CondStart, ThenStatement;

//===================


//SEMANTICS NON TERMINAL
non terminal rs.etf.pp1.symboltable.concepts.Struct Type;

non terminal rs.etf.pp1.symboltable.concepts.Obj ProgramName;
non terminal rs.etf.pp1.symboltable.concepts.Obj ConstValue, MethodDecl, MethodTypeAndName;


non terminal rs.etf.pp1.symboltable.concepts.Obj DesignatorIdent, Designator;
non terminal rs.etf.pp1.symboltable.concepts.Struct Factor, FactorMulopRepeat, Term, TermAddopRepeat, Expr, SmolExpr, FunctCall;
non terminal rs.etf.pp1.symboltable.concepts.Struct Assignment;
non terminal rs.etf.pp1.symboltable.concepts.Struct Condition, CondTerm, CondFact, CondTermOrRepeat, CondFactorAndRepeat;

//===================

//PRECEDENCE
precedence left ELSE;



//terminali allcaps
//zagrade na desnoj strani su ime klase u ast
//PARSER
Program ::= (Program) PROGRAM ProgramName ConstVarClassDeclRepeat LBRACE MethodDeclRepeat RBRACE;
ProgramName ::= (ProgramName) IDENT:programName;

ConstVarClassDeclRepeat ::= (ConstVarClassDeclRepeatExists) ConstVarClassDeclRepeat ConstVarClassDecl
                        |
                        (ConstVarClassDeclRepeatEmpty) /* empty */
                        ;

ConstVarClassDecl ::= ConstDecl | VarDecl | ClassDecl;

Type ::= (Type) IDENT:typeName;

ConstDecl ::= (ConstDecl) CONST Type:Type IDENT:Name EQUAL ConstValue:Val ConstDeclRepeat SEMICOLN;

ConstValue ::= (ConstValueNum) NUM | (ConstValueChar) CHAR | (ConstValueBool) BOOLEAN;

ConstDeclRepeat ::= ConstDeclRepeat COMMA IDENT:Name EQUAL ConstValue:Val
                    |
                    /* empty */
                    ;


VarDecl ::= (VarDeclNoErr) Type:Type IDENT:Name ArrayBracketsDeclOptional VarDeclIdentRepeat SEMICOLN
            |
            error SEMICOLN
            ;

VarDeclIdentRepeat ::=  (VarDeclIdentRepeatNoErr) VarDeclIdentRepeat COMMA IDENT:Name ArrayBracketsDeclOptional 
                        |
                        error COMMA
                        |
                        /* empty */
                        ;


ArrayBracketsDeclOptional ::= (ArrayBracketsDeclExists) LBRACKET RBRACKET | /* empty */ (ArrayBracketsDeclEmpty);
VarDeclRepeat ::= VarDeclRepeat VarDecl | /* empty */;


ClassDecl ::= (ClassDecl) ClassName ClassExtendsOptional LBRACE VarDeclRepeat ClassMethodDecl RBRACE;
ClassExtendsOptional ::= (ClassExtendsExists) EXTENDS SuperClass | /* empty */ (ClassExtendsEmpty);
ClassMethodDecl ::= (ClassMethodDecl) LBRACE MethodDeclRepeat RBRACE;


ClassName::= (ClassName) CLASS IDENT:Name;
SuperClass::= (SuperClassNoErr) IDENT:Name | (ErrSuperClass) error;



MethodDecl ::= (MethodDecl) MethodTypeAndName LPAREN FormParsOptional RPAREN VarDeclRepeat LBRACE StatementRepeat RBRACE;
MethodDeclRepeat ::= MethodDeclRepeat MethodDecl | /* empty */;
MethodType ::= (MethodTypeReturn) Type | (MethodTypeReturnVoid) VOID;

MethodTypeAndName ::= (MethodTypeAndName) MethodType:retType IDENT:name;


//methodDeclPars != varDecl


FormParsOptional ::= (FormParsExists) FormPars | /* empty */;
FormPars ::= FormParDecl FormParRepeat;

FormParDecl ::= (FormParDeclNoErr) Type:Type IDENT:Name ArrayBracketsDeclOptional
                |
                error
                ;


FormParRepeat ::= FormParRepeat COMMA FormParDecl 
                    |
                    error COMMA
                    |
                    /* empty */
                    ;


StatementRepeat ::= StatementRepeat Statement | /* empty */;
Statement ::= DesignatorStatement SEMICOLN
            |
            (IfStatement) StartIf CondStart Condition RPAREN ThenStatement ElseStatementOptional
            |
            (DoWhileStatement) StartDo Statement WHILE LPAREN Condition RPAREN SEMICOLN
            |
            (SwitchStatement) StartSwitch LPAREN Expr RPAREN LBRACE CaseRepeat RBRACE
            |
            (BreakStatement) BREAK SEMICOLN
            |
            (ContinueStatement) CONTINUE SEMICOLN
            |
            (ReturnExprStatement) RETURN Expr SEMICOLN
            |
            (ReturnNoExprStatement) RETURN SEMICOLN
            |
            (ReadStatement) READ LPAREN Designator RPAREN SEMICOLN
            |
            (PrintStatement) PRINT LPAREN Expr PrintWidthOptional RPAREN SEMICOLN
            |
            (CodeBlockStatement) LBRACE StatementRepeat RBRACE
            ;

ThenStatement::=(ThenStatement) Statement;
CondStart::= (CondStart) LPAREN;

StartIf::= (StartIf)IF;
StartDo ::= (StartDo) DO;
StartSwitch ::= (StartSwitch) SWITCH;

DesignatorStatement ::= Assignment
                        |
                        (DesignatorStatementFunctCall) FunctCall
                        |
                        (DesignatorStatementIncrement)Designator INC
                        |
                        (DesignatorStatementDecrement)Designator DECR
                        ;

Assignment ::= (AssignmentNoErr) Designator:Designator Assignop Expr:Expr
                |
                error
                ;

Designator ::= (Designator) DesignatorIdent ArrayBracketsOptional SubDesignatorRepeat;
SubDesignatorRepeat ::= (SubDesignatorRepeatExists) DOT DesignatorIdent ArrayBracketsOptional SubDesignatorRepeat | /* empty */;

DesignatorIdent ::= (DesignatorIdent) IDENT:Name;


ArrayBracketsOptional ::= (ArrayBracketsExists) LBRACKET Expr:Index RBRACKET |(ArrayBracketsEmpty) /* empty */ ;

/*operators*/
Assignop ::= (OperatorEq) EQUAL;
Mulop ::= (OperatorMul) MUL | (OperatorDiv) DIV | (OperatorMod) MOD;
Addop ::= (OperatorAdd) ADD | (OperatorSub) SUB;

MinusOptional ::= (MinusExists) SUB | (MinusEmpty) /* empty */;



//new ziza ternarni
Expr ::= (TernaryOperatorExpr) SmolExpr:TernConditionExpr QMARK SmolExpr:Truthy DDOTS SmolExpr:Falsey
        |
        (NoTernExpr) SmolExpr:SmolExpr
        ;

SmolExpr ::=  (SmolExpr) MinusOptional Term:Term TermAddopRepeat:OtherTerms;


TermAddopRepeat ::= (TermAddopRepeatExists) TermAddopRepeat:OtherTerms Addop Term | (TermAddopRepeatEmpty) /* empty */;
Term ::= (Term) Factor:Factor FactorMulopRepeat:OtherFactors;
FactorMulopRepeat ::= (FactorMulopRepeatExists) FactorMulopRepeat:OtherFactors Mulop Factor:Factor | (FactorMulopRepeatEmpty) /* empty */;

Factor ::=  (DesFactor) Designator:Designator
            |
            (FunctCallFactor) FunctCall:FunctCall
            |
            (ConstFactor) ConstValue:ConstValue
            |
            (NewOperatorFactor) NEW Type:Type ArrayBracketsOptional
            |
            (SubExprFactor) LPAREN Expr RPAREN
            ;


FunctCall ::= (FunctCall) FunctDesignator:FunctDesignator LPAREN ActParsOptional:Params RPAREN;
FunctDesignator ::= (FunctDesignator) Designator:func;

ActParsOptional ::= (ActParsExists) ActPars | (ActParsEmpty) /* empty */;
ActPars ::= (ActParsMultiple) ActPars COMMA Expr:Expr | (ActParsSingle) Expr:Expr;


Condition ::= (ConditionNoErr) CondTerm:CondTerm CondTermOrRepeat:OtherCondTerms | error;
CondTermOrRepeat ::= (CondTermOrRepeatExists) CondTermOrRepeat:OtherCondTerms OrStart CondTerm:CondTerm | /* empty */;
OrStart::= (OrStart) OR;




CondTerm ::= (CondTerm) CondFact:CondFact CondFactorAndRepeat:OtherCondFacts;
CondFactorAndRepeat ::= (CondFactorAndRepeatExists) CondFactorAndRepeat:OtherCondFacts AND CondFact:CondFact | /* empty */;
CondFact ::= (CondFact) Expr:Expr RelopExprOptional:OtherExpr;

Relop ::= (CmpEq) EQUALS | (CmpNeq) NEQUALS | (CmpGrt) GRT |(CmpGrtEq) GRTEQUAL 
            | (CmpLess) LESS | (CmpLessEq) LESSEQUAL;

RelopExprOptional ::= (RelopExprExists) Relop Expr:Expr |(RelopExprEmpty) /* empty */;


ElseStatementOptional ::= (ElseStatementExists) ElseStart Statement | (ElseStatementEmpty) /* empty */;
ElseStart ::= (ElseStart)ELSE;
CaseRepeat ::= (CaseRepeatExists) CaseRepeat CASE NUM:Num DDOTS StatementRepeat | /* empty */;
PrintWidthOptional ::= (PrintWidthExists) COMMA NUM | (PrintWidthEmpty) /* empty */;






